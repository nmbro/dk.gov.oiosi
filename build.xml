<?xml version="1.0" encoding="UTF-8"?>
<project name="NemHandel" default="all">
    <!-- In order to user the msbuild element, the NAntContrib must be included -->
    <loadtasks assembly="./lib/NAntContrib/nantcontrib/bin/NAnt.Contrib.Tasks.dll"/>

    <property name="Number_Major" value="2"/>
    <property name="Number_Minor" value="2"/>
    <property name="Number_Patch" value="0"/>
    <property name="Directory.packages" value="packages"/>
    <!-- When updating the version number, remember to update theses files.
      They have a reference to the actual version, almost at the end of the file.
      The number should be like this (note, it must end with '.0').
        <Number_Major>.<Number_Minor>.<Number_Patch>.0
    ./test/dk.gov.oiosi.test.unit/App.config
    ./test/dk.gov.oiosi.test.request/App.Config
    ./test/dk.gov.oiosi.test.integration/App.Config
    
    Udover disse file, kan/vil det være 'smart' at opdater NHK også, hvis den skal releases med den nyester version af RASP
    nrk/src/dk.gov.oiosi.client.ui/App.Config
    nrk/lib/dk.gov.oiosi.verify/dk.gov.oiosi.verify.Console.exe.config
    
    Samt opdater check toolet (hvis der skal releases en ny version af NHK'en).
    checkTool/...?
  -->


    <!-- Should be Dev, and the build server set it to Prod -->
    <property name="buildType" value="Prod"/>

    <property name="Version" value="${Number_Major}.${Number_Minor}.${Number_Patch}"/>
    <property name="Revision" value="${Number_Major}.${Number_Minor}.${Number_Patch}.${build.number}"/>
    <property name="InformationalVersion" value="${Number_Major}.${Number_Minor}.${Number_Patch} ${buildType}"/>

    <property name="Dist.dir" value="target\dist"/>
    <property name="Temp.dir" value="target\temp"/>
     
    <property name="VisualStudioSolution.file" value="dk.gov.oiosi.library.sln"/>
    <property name="Root.dir" value="."/>
    <property name="Oiosi.dir" value="src\dk.gov.oiosi"/>
    <property name="Xml.dir" value="src\dk.gov.oiosi.xml"/>
    <property name="RaspProfile.dir" value="src\dk.gov.oiosi.raspProfile"/>
    <property name="UnitTest.file" value="test/dk.gov.oiosi.test.unit/bin/release/dk.gov.oiosi.test.unit.dll"/>
    <property name="IntegrationTest.file" value="test/dk.gov.oiosi.test.integration/bin/release/dk.gov.oiosi.test.integration.dll"/>
    
    <!-- Property overrided by TeamCity -->
    <property name="teamcity.dotnet.nunitlauncher2.0" value="packages/NUnit.Runners.2.6.4/tools/nunit-console.exe" />
    
    <property name="sha1Hash" value="92b3f0931791847402b6f6f313edfb94b86a032f"/>
    <property name="timestampingServer" value="http://rfc3161timestamp.globalsign.com/advanced"/>
    
    <!-- The SignTool.exe can exist in multi location, on different computers. -->
    <!-- Therefore we must look after the file in all known places, where it can exist. -->
    <property name="SignToolPath01" value="C:\Program Files (x86)\Windows Kits\8.0\bin\x64" />


    <!-- Tell the build server what our actual build number is -->
    <echo message="##teamcity[buildNumber '${Revision}']"/>

    <target name="Clean" description="Remove all build products">
        <delete dir="${Dist.dir}"/>
        <delete dir="${Temp.dir}"/>
        <delete dir="${Directory.packages}"/>
    </target>

    <target name="Init" depends="Clean" description="Create release directories" >
        <mkdir dir="${Dist.dir}"/>
        <mkdir dir="${Temp.dir}"/>
        <!-- NugetRestore create its own directory -->
    </target>

    <target name="NuGetRestore" depends="Init" description="Restores all nuget packages to a common package folder">
        <trycatch>
            <try>
                <mkdir dir="${Directory.packages}"/>
                <!-- Call NuGetRestore.bat using the specified package directory as output,
            and with NoPause arg to make sure it doesn't pause after execution -->
                <exec program="NuGetRestore.bat">
                    <arg value="${Directory.packages}"/>
                    <arg value="NoPause"/>
                </exec>
            </try>
            <catch property="failure.message">
                <echo message="${target::get-current-target()} failed:"/>
                <echo message="${failure.message}"/>
                <fail message="${failure.message}"/>
            </catch>
        </trycatch>
    </target>
    
    <target name="SetVersion" depends="Init">

        <asminfo language="CSharp" output="AssemblyInfoFileVersion.cs">
            <imports>
                <import namespace="System.Reflection"/>
            </imports>
            <attributes>
                <attribute type="AssemblyFileVersionAttribute" value="${Revision}"/>
            </attributes>
        </asminfo>

        <asminfo language="CSharp" output="AssemblyInfoVersion.cs">
            <imports>
                <import namespace="System.Reflection"/>
            </imports>
            <attributes>
                <attribute type="AssemblyVersionAttribute" value="${Version}"/>
                <attribute type="AssemblyInformationalVersionAttribute" value="${InformationalVersion}"/>
            </attributes>
        </asminfo>       
    </target>
   

    <target name="BuildVisualStudioSolutionNet35" depends="SetVersion, NuGetRestore">
        <!-- msbuild project="${VisualStudioSolution.file}" target="Rebuild">
                <property name="Configuration" value="Debug" />
                <property name="teamcity_dotnet_use_msbuild_v35" value="true" />
            </msbuild -->
        <msbuild project="${VisualStudioSolution.file}" target="Rebuild">
            <property name="Configuration" value="Release"/>
            <property name="teamcity_dotnet_use_msbuild_v35" value="true"/>
        </msbuild>
    </target>

    
    <target name="Execute.RunTests" >
        <echo message="Using NUnit launcher ${teamcity.dotnet.nunitlauncher2.0}."/>
        <exec program="${teamcity.dotnet.nunitlauncher2.0}">
            <arg file="${UnitTest.file}"/>
        </exec>
    </target>
    <target name="RunTests" depends="BuildVisualStudioSolutionNet35, Execute.RunTests" />        
    
    <target name="Execute.Sign" depends="" description="Execute signing, without dependensies">
      <!-- There is multi files that must be signed. -->
      <trycatch>
        <try>

          <property name="SignToolPassword" value="${environment::get-variable('DigstSignToolPassword')}"/>
        
          <!--Create a tmp file, that make our password fill keep going...  -->
          <echo message="AutomaticPasswordFiller."/>
          <property name="KeepGoingFile" value="${Temp.dir}\KeepGoingRaspLibrary" />
          <touch file="${KeepGoingFile}" />          
          <echo message="KeepGoingFile: '${KeepGoingFile}'."/>
          <exec program="lib\AutomaticPasswordFiller.exe" pidproperty="Rasp.pid" spawn="true" >
            <arg value="${KeepGoingFile}" />
            <arg value="${SignToolPassword}" />
          </exec>

          
          <property name="SignFile" value="${SignToolPath01}\SignTool.exe"/>       
          <if test="${not file::exists(SignFile)}">
            <echo message="Signing.exe was not located! '${SignFile}'."/>
          </if>
          <!-- If the signtool does not exist in this location, other locations should be tried. -->

          <property name="tmp.FileToSign" value="${Oiosi.dir}\bin\Release\dk.gov.oiosi.appConfig.dll"/>
          <call target="SignTheFile" />     
          
          <property name="tmp.FileToSign" value="${Oiosi.dir}\bin\Release\dk.gov.oiosi.configuration.dll"/>
          <call target="SignTheFile" />
          
          <property name="tmp.FileToSign" value="${Oiosi.dir}\bin\Release\dk.gov.oiosi.exception.dll"/>
          <call target="SignTheFile" />
          
          <property name="tmp.FileToSign" value="${Oiosi.dir}\bin\Release\dk.gov.oiosi.library.dll"/>
          <call target="SignTheFile" />
          
          <property name="tmp.FileToSign" value="${Oiosi.dir}\bin\Release\dk.gov.oiosi.logging.dll"/>
          <call target="SignTheFile" />
          
          <property name="tmp.FileToSign" value="${RaspProfile.dir}\bin\Release\dk.gov.oiosi.raspProfile.dll"/>
          <call target="SignTheFile" />
          
          <!-- <sleep seconds="5" /> -->
          
          <!-- cleanup -->
          <delete file="${KeepGoingFile}" />

          <!-- Wait max 5 seconds -->
          <waitforexit pid="${Rasp.pid}" timeout="5000" />
        </try>
        <catch property="failure.message">
          <echo message="${target::get-current-target()} failed:"/>
          <echo message="${failure.message}"/>
          <!-- always delete the file -->
          <if test="${not file::exists(KeepGoingFil)}">
               <delete file="${KeepGoingFile}" />
          </if>       
          <fail message="${failure.message}"/>
        </catch>
      </trycatch>
    </target>    
    <target name="Sign" depends="BuildVisualStudioSolutionNet35,Execute.Sign" description="Sign the dlls." />
    
    <target name="SignTheFile">
      <trycatch>
        <try>
          
          <echo message="Signing the file '${tmp.FileToSign}'."/>
          <exec program="${SignFile}">
            <arg value="sign" />
            <arg value="/sha1 &quot;${sha1Hash}&quot;" />
            <arg value="/tr &quot;${timestampingServer}&quot;" />
            <arg value="/td &quot;SHA256&quot;" />
            <arg value="${tmp.FileToSign}" />
          </exec>
       </try>
        <catch property="failure.message">
          <echo message="${target::get-current-target()} failed:"/>
          <echo message="${failure.message}"/>
          <fail message="${failure.message}"/>
        </catch>
      </trycatch>
    </target> 
    
    <!-- can't add sign yet, as donkel is mapped yet -->
    <!-- target name="Distribute" depends="RunTests,Sign" -->
    <target name="Distribute" depends="RunTests">
        <!-- Executable -->
        <zip zipfile="${Dist.dir}\dk.gov.oiosi-bin-${Revision}.zip">
            <fileset basedir="${Oiosi.dir}\bin\Release">
                <include name="**/*"/>
                <exclude name="**/*.pdb"/>
            </fileset>
            <!-- Oiosi does not reference dk.gov.oiosi.raspProfile.dll, so it must be included here -->
            <fileset basedir="${RaspProfile.dir}\bin\Release">
                <include name="dk.gov.oiosi.raspProfile.dll"/>
            </fileset>
            <!-- Oiosi does not reference dk.gov.oiosi.xml.dll, so it must be included here -->
            <!-- dk.gov.oiosi.xml project is not used anymore. -->
            <!-- <fileset basedir="${Xml.dir}\bin\Release"> -->
                <!-- <include name="dk.gov.oiosi.xml.dll"/> -->
            <!-- </fileset> -->
        </zip>

        <!-- Rasp profile library -->
        <!-- zip zipfile="${Dist.dir}\dk.gov.oiosi.raspProfile-${Revision}.zip">
            <fileset basedir="${RaspProfile.dir}\bin\Release">
                <include name="**/*" />
            </fileset>
        </zip -->
        <!-- XML shared library -->
        <!-- zip zipfile="${Dist.dir}\dk.gov.oiosi.xml-${Revision}.zip">
            <fileset basedir="${Xml.dir}\bin\Release">
                <include name="**/*" />
            </fileset>
        </zip -->
        <!-- Rasp profile resources - input to msi -->
        <!-- zip zipfile="${Dist.dir}\dk.gov.oiosi.raspProfile-msi-input.zip">
            <fileset basedir="${RaspProfile.dir}\Resources">
                <include name="**/*" />
            </fileset>
        </zip --> 
        <!-- Source section -->
        <zip zipfile="${Dist.dir}\dk.gov.oiosi-src-${Revision}.zip">
            <fileset basedir="${Root.dir}">
                <include name="**/*"/>
                <exclude name="**/bin"/>
                <exclude name="**/bin/**"/>
                <exclude name="**/obj"/>
                <exclude name="**/obj/**"/>
                <exclude name="target/**"/>
                <exclude name="*.resharper"/>
                <exclude name="*.cache"/>
                <exclude name="**/bin"/>
                <exclude name=".nuget/**"/>
                <exclude name="packages/**"/>
                <exclude name="*.bat"/>
                <exclude name="*.log"/>
                <exclude name="doc/*.doc"/>
            </fileset>
        </zip>
        <!-- Source with bin folder - input to help file -->
        <!-- zip zipfile="${Dist.dir}\dk.gov.oiosi-src-helpfile-input.zip">
            <fileset basedir="${Root.dir}">
                <include name="**/*" />
            </fileset>
        </zip -->
    </target>

    <target name="Release" depends="Distribute"/>

    <target name="DevBuild" depends="BuildVisualStudioSolutionNet35"/>

</project>