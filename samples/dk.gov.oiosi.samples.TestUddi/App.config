<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * Copyright (c) 2007, Danish National IT and Telecom Agency All rights reserved.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above copyright notice,
 *       this list of conditions and the following disclaimer in the documentation
 *       and/or other materials provided with the distribution.
 *
 *     * Neither the name of the Danish National IT and Telecom Agency nor the names
 *       of its contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */
-->
<configuration>
  <configSections>
    <section name="loggingConfiguration" type="Microsoft.Practices.Enterprisedk.gov.oiosi.library.Logging.Configuration.LoggingSettings, Microsoft.Practices.Enterprisedk.gov.oiosi.library.Logging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null" />
    <section name="dataConfiguration" type="Microsoft.Practices.Enterprisedk.gov.oiosi.library.Data.Configuration.DatabaseSettings, Microsoft.Practices.Enterprisedk.gov.oiosi.library.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null" />
  </configSections>
  <!--  Diagnostics.

        This section enables logging of SOAP messages and traces of the inner workings of WCF and the OIOSI library(for example exceptions thrown).
        To enable the logging, just remove the commentation "< ! - -" from the code below.

        SOAP messages end up in the file App_messages.svclog and exceptions in App_tracelog.svclog,
        both in the same folder as the program running
  -->
  <!--<system.diagnostics>
    <sources>

      <source name="System.ServiceModel" switchValue="Verbose,ActivityTracing"
        propagateActivity="true">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging" switchValue="Warning, ActivityTracing" logKnownPii="true">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelMessageLoggingListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="dk.gov.oiosi.library" switchValue="Warning, ActivityTracing"><listeners><add type="System.Diagnostics.DefaultTraceListener" name="Default"><filter type="" /></add><add name="ServiceModelTraceListener"><filter type="" /></add></listeners></source>
      <source name="dk.gov.oiosi.raspProfile" switchValue="Warning, ActivityTracing"><listeners><add type="System.Diagnostics.DefaultTraceListener" name="Default"><filter type="" /></add><add name="ServiceModelTraceListener"><filter type="" /></add></listeners></source>
    </sources>
    <sharedListeners>
      <add initializeData="App_tracelog.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        name="ServiceModelTraceListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
      <add initializeData="App_messages.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        name="ServiceModelMessageLoggingListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
    </sharedListeners>
    <trace autoflush="true" />
  </system.diagnostics>-->

  <system.serviceModel>
    <diagnostics>
      <messageLogging logEntireMessage="true" logMalformedMessages="true" logMessagesAtServiceLevel="false" logMessagesAtTransportLevel="true" />
    </diagnostics>

    <client>
      <!-- The HTTP endpoint
           •	Address sets the remote endpoint address, to which requests will be sent
           •	Binding/bindingConfiguration sets the binding of this particular endpoint. In the binding (which is always a customBinding as App.Config sample 1 shows) we will describe the stack setup of the endpoint. More on this in later sections.
           •	Contract represents service contract implemented by the endpoint, describing what operations are supported and what SOAP actions they expect (and return). RASP endpoints should implement dk.gov.oiosi.Rasp.Communication.Proxy.IRaspProxyContract
           •	behaviorConfiguration defines the endpoint behaviour. The RASP Library uses behaviours to select certificates for sending and receiving.
      -->
      <endpoint name="OiosiHttpEndpoint" address="http://193.163.141.141/Interoptest2/OiosiOmniEndpointA.svc" binding="customBinding" bindingConfiguration="OiosiHttpBinding" contract="dk.gov.oiosi.communication.client.IClientProxyContract" behaviorConfiguration="OiosiEndpointBehavior" />
    </client>

    <behaviors>
      <endpointBehaviors>
        <behavior name="OiosiEndpointBehavior">
          <signCustomHeaders>
            <headers>
              <add name="SenderPartyIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="ReceiverPartyIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="SenderPartyIdentifierType" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="ReceiverPartyIdentifierType" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="MessageIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
            </headers>
          </signCustomHeaders>
        </behavior>
      </endpointBehaviors>
    </behaviors>

    <bindings>
      <!-- Basic http binding is used to perform UDDI calls -->
      <basicHttpBinding>
        <binding name="basic" closeTimeout="00:05:00" openTimeout="00:05:00" receiveTimeout="00:05:00" sendTimeout="00:05:00" textEncoding="utf-8" maxReceivedMessageSize="10000000" />
      </basicHttpBinding>

      <wsHttpBinding>
        <binding name="WSHttpBinding" closeTimeout="00:05:00"
            openTimeout="00:05:00" receiveTimeout="00:05:00" sendTimeout="00:05:00"
            bypassProxyOnLocal="false" transactionFlow="false" hostNameComparisonMode="StrongWildcard"
            maxBufferPoolSize="524288" maxReceivedMessageSize="65536"
            messageEncoding="Text" textEncoding="utf-8" useDefaultWebProxy="true"
            allowCookies="false">
          <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384"
              maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="Transport">
            <transport clientCredentialType="Certificate" proxyCredentialType="None"
                realm="" />
            <message clientCredentialType="None" negotiateServiceCredential="true"
                algorithmSuite="Default" establishSecurityContext="true" />
          </security>
        </binding>
      </wsHttpBinding>

      <customBinding>
        <!-- The OIOSI RASP HTTP binding - Sending -->
        <binding name="OiosiHttpBinding" closeTimeout="00:05:00" openTimeout="00:05:00" receiveTimeout="00:05:00" sendTimeout="00:05:00">
          <reliableSession flowControlEnabled="false" ordered="true" maxTransferWindowSize="32" maxPendingChannels="32" />
          <ubiquitousProperties />
          <clientSignatureValidationProofInterceptor />
          <security messageSecurityVersion="WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" defaultAlgorithmSuite="Default" authenticationMode="MutualCertificate" requireDerivedKeys="false" securityHeaderLayout="Strict" includeTimestamp="true" keyEntropyMode="CombinedEntropy" messageProtectionOrder="SignBeforeEncrypt" requireSignatureConfirmation="false">
            <localClientSettings maxClockSkew="00:10:00" />
            <localServiceSettings maxClockSkew="00:10:00" />
            <secureConversationBootstrap>
              <localClientSettings maxClockSkew="00:10:00" />
              <localServiceSettings maxClockSkew="00:10:00" />
            </secureConversationBootstrap>
          </security>
          <clientPartyIdentifierHeader />
          <textMessageEncoding messageVersion="Default" writeEncoding="utf-8">
            <readerQuotas maxArrayLength="200000000" />
          </textMessageEncoding>
          <httpTransport manualAddressing="false" maxReceivedMessageSize="10485760" maxBufferSize="10485760" />
        </binding>
      </customBinding>
    </bindings>

    <!-- Our binding extension, letting WCF know where our custom WCF components are implemented -->
    <extensions>
      <bindingElementExtensions>
        <!-- Signature validation proof generation -->
        <add name="serverSignatureValidationProofInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Security.ServerSignatureValidationProofBindingExtensionElement, dk.gov.oiosi.library" />
        <add name="clientSignatureValidationProofInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Security.ClientSignatureValidationProofBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Schema validation -->
        <add name="serverSchemaValidationInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Schema.ServerSchemaValidationBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Schema validation -->
        <add name="serverSchematronValidationInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Schematron.ServerSchematronValidationBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Custom RASP headers-->
        <add name="clientPartyIdentifierHeader" type="dk.gov.oiosi.raspProfile.extension.wcf.Interceptor.CustomHeader.ClientPartyIdentifierHeaderBindingExtensionElement, dk.gov.oiosi.raspProfile" />
        <add name="serverPartyIdentifierHeader" type="dk.gov.oiosi.raspProfile.extension.wcf.Interceptor.CustomHeader.ServerPartyIdentifierHeaderBindingExtensionElement, dk.gov.oiosi.raspProfile" />
        <!-- Adds parameters to ALL messages, including RM messages -->
        <add name="ubiquitousProperties" type="dk.gov.oiosi.extension.wcf.Interceptor.UbiquitousProperties.UbiquitousPropertiesBindingExtensionElement, dk.gov.oiosi.library" />
      </bindingElementExtensions>

      <behaviorExtensions>
        <!-- Behavior that selects headers to be added for signing -->
        <add name="signCustomHeaders" type="dk.gov.oiosi.extension.wcf.Behavior.SignCustomHeadersBehaviorExtensionElement, dk.gov.oiosi.library, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null" />
      </behaviorExtensions>
    </extensions>
  </system.serviceModel>
</configuration>