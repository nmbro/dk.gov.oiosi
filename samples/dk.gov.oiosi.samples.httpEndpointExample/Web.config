<?xml version="1.0"?>
<!--
  * The contents of this file are subject to the Mozilla Public
  * License Version 1.1 (the "License"); you may not use this
  * file except in compliance with the License. You may obtain
  * a copy of the License at http://www.mozilla.org/MPL/
  *
  * Software distributed under the License is distributed on an
  * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
  * or implied. See the License for the specific language governing
  * rights and limitations under the License.
  *
  *
  * The Original Code is .NET RASP toolkit.
  *
  * The Initial Developer of the Original Code is Accenture and Avanade.
  * Portions created by Accenture and Avanade are Copyright (C) 2007
  * Danish National IT and Telecom Agency (http://www.itst.dk).
  * All Rights Reserved.
  *
  * Contributor(s):
  *   Gert Sylvest (gerts@avanade.com)
  *   Patrik Johansson (p.johansson@accenture.com)
  *   Michael Nielsen (michaelni@avanade.com)
  *   Dennis SÃ¸gaard (dennis.j.sogaard@accenture.com)
  *   Mikkel Hippe Brun (mhb@itst.dk)
  *   Finn Hartmann Jordal (fhj@itst.dk)
  *   Christian Lanng (chl@itst.dk)
  *
  *
-->
<configuration>
  <configSections>
    <section name="LoggerSection" type="dk.gov.oiosi.appConfig.Logger.LoggerSection,dk.gov.oiosi.appConfig" />
  </configSections>

  <!-- This section defines with logger type to used, and how to configurate it -->
  <LoggerSection>
    <!-- Any configuration for a logger, must exist in that loggers app.config-->
    <Logger creator="dk.gov.oiosi.logging.Log4NetCreator,dk.gov.oiosi.logging" />
  </LoggerSection>

  <!--  Diagnostics. To enable logging, remove the commenting around this section.
        Saves SOAP messages in a file called Messages.svclog, and internal .Net traces in a file called Traces.svclog
        The log files can be viewed using Microsoft Trace Viewer, which comes with Win SDK for .Net 3 -->

  <system.diagnostics>
    <sources>
      <source name="System.ServiceModel.MessageLogging" switchValue="Verbose,ActivityTracing">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="MessageLogging Listener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="System.ServiceModel" switchValue="Warning, ActivityTracing" propagateActivity="true">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add initializeData="Messages.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="MessageLogging Listener" traceOutputOptions="LogicalOperationStack, DateTime, Timestamp">
        <filter type="" />
      </add>
      <add initializeData="Traces.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="ServiceModelTraceListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
    </sharedListeners>
    <trace autoflush="true" />
  </system.diagnostics>

  <appSettings>

    <add key="RaspConfigurationFile"         value="D:\VisualStudio\ITST.open.ebusiness\dk.gov.oiosi\trunk\dk.gov.oiosi\src\dk.gov.oiosi.resource\RaspConfiguration.Live.xml" />
    <add key="log4Net4RaspConfigurationFile" value="D:\VisualStudio\ITST.open.ebusiness\dk.gov.oiosi\trunk\dk.gov.oiosi\src\dk.gov.oiosi.Logging\log4net4Rasp.xml" />
    <add key="ResourceBasePath"              value="D:\VisualStudio\ITST.open.ebusiness\dk.gov.oiosi\trunk\dk.gov.oiosi\src\dk.gov.oiosi.resource\" />
    <!-- {0} = The date time/ DateTime.Now.ToString() -->
    <!-- {1} = The version (2.0.2) -->
    <add key="ResponseText" value="EasyTrade .Net test endpoint {1} received the request at {0}." />
  </appSettings>
  <system.serviceModel>
    <diagnostics>
      <messageLogging logEntireMessage="true" logMalformedMessages="true" logMessagesAtTransportLevel="true" />
    </diagnostics>
    <bindings>
      <!-- Basic http binding is used to perform UDDI calls -->
      <basicHttpBinding>
        <binding name="basic" closeTimeout="00:01:00" openTimeout="00:01:00" receiveTimeout="00:01:00" sendTimeout="00:01:00" textEncoding="utf-8" maxReceivedMessageSize="2147483647" />
      </basicHttpBinding>

      <customBinding>
        <!-- The standard OIOSI RASP HTTP binding -->
        <binding name="OiosiHttpBinding" closeTimeout="00:01:00" openTimeout="00:01:00" receiveTimeout="00:01:00" sendTimeout="00:01:00">
          <!-- The Interceptor is performed in reverse order -  -->
          <!-- XML Schematron validation. Set ValidateRequest="true" for enable schematron validation and ValidateRequest="false" for disable schematron validation -->
          <serverSchematronValidationInterceptor ValidateRequest="true" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <!-- XML Schema validation. Set ValidateRequest="true" for enable schema validation and ValidateRequest="false" for disable schema validation    FaultOnRequestValidationException="true" -->
          <serverSchemaValidationInterceptor ValidateRequest="true" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <!-- Certificat validation -->
          <serverCertificateValidationInterceptor ValidateRequest="true" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <!-- Generates a signature validation proof, added as a property on the reply message -->
          <serverSignatureValidationProofInterceptor ValidateRequest="true" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <!-- NOTE: All interceptors must be located above reliableSession -->
          <!-- NOTE: If placed below, they can make the endpoint stop  -->

          <!-- WS-ReliableMessaging -->
          <reliableSession inactivityTimeout="00:05:00" maxRetryCount="8" ordered="true" />
          <!-- WS-Security -->
          <security defaultAlgorithmSuite="Default" authenticationMode="MutualCertificate" requireDerivedKeys="false" securityHeaderLayout="Strict" includeTimestamp="true" messageProtectionOrder="SignBeforeEncrypt" messageSecurityVersion="WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" requireSignatureConfirmation="false">
            <localClientSettings maxClockSkew="00:10:00" />
            <localServiceSettings maxClockSkew="00:10:00" />
            <secureConversationBootstrap>
              <localClientSettings maxClockSkew="00:10:00" />
              <localServiceSettings maxClockSkew="00:10:00" />
            </secureConversationBootstrap>
          </security>
          <!-- Adds the custom SenderParty/ReceiverPartyIndetifier headers -->
          <serverPartyIdentifierHeader />
          <!-- Encoding -->
          <textMessageEncoding messageVersion="Default" writeEncoding="utf-8">
            <readerQuotas maxArrayLength="2147483647" />
          </textMessageEncoding>
          <!-- HTTP transport -->
          <!-- 2^31 ~> 2147483648 ~> 2 GB. int.MaxValue ~ 2,147,483,647  -->
          <!-- httpTransport manualAddressing="false" maxReceivedMessageSize="2147483648" maxBufferSize="2147483648"/ -->
          <httpTransport manualAddressing="false" maxReceivedMessageSize="2147483647" maxBufferSize="2147483647" />
        </binding>
      </customBinding>
    </bindings>

    <!-- Our OiosiOmniEndpoint service-->
    <services>
      <service behaviorConfiguration="certificateBehaviour" name="dk.gov.oiosi.samples.httpEndpointExample.TestService">
        <endpoint binding="customBinding" bindingConfiguration="OiosiHttpBinding" name="OiosiOmniEndpoint" contract="dk.gov.oiosi.communication.service.IServiceContract" />
      </service>
    </services>
    <!-- Behaviors are used to set certificates used by the services. The certificate used can be found in resources\OiosiTestVOCES.pfx -->
    <behaviors>
      <serviceBehaviors>
        <behavior name="certificateBehaviour" returnUnknownExceptionsAsFaults="true">
          <serviceMetadata httpGetEnabled="true" />
          <!-- Add sigingin of the custom RASP headers (added by the <partyIdentifierInterceptor /> element
          found under the binding -->
          <signCustomHeaders>
            <headers>
              <add name="MessageIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="SenderPartyIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="SenderPartyIdentifierType" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="ReceiverPartyIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="ReceiverPartyIdentifierType" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
            </headers>
          </signCustomHeaders>
          <!-- Configure certificate -->
          <serviceCredentials>
            <!-- The servers functioncertificate -->
            <!-- Be aware, that if deployed on IIS, the storeLocation should not be 'CurrentUser', as the IIS -->
            <!-- normaly does not run under the currentUser windos account, and there does not have acces to thoses certificates -->
            <!-- -->
            <!-- Test Foces 1 - Note expired -->
            <!-- SerialNumber: 40 37 60 8e -->
            <!-- Expire: 2011.10.16 12:37:26 -->
            <!-- Subject: CN = FOCES1 (funktionscertifikat) + SERIALNUMBER = CVR:30808460-FID:1255692730737, O = DANID A/S // CVR:30808460, C = DK -->
            <!-- serviceCertificate storeLocation="LocalMachine" storeName="My" x509FindType="FindBySerialNumber" findValue="4037608e"/ -->
            <!-- -->
            <!-- Test Foces 1 -->
            <!-- SerialNumber: 40 37 fb 49 -->
            <!-- Expire: 2013.11.01 09:26:11 -->
            <!-- Subject: CN = TEST FOCES1 (funktionscertifikat) + SERIALNUMBER = CVR:30808460-FID:1320135775022, O = DANID A/S // CVR:30808460, C = DK -->
            <!-- serviceCertificate storeLocation="LocalMachine" storeName="My" x509FindType="FindBySerialNumber" findValue="40 37 fb 49"/ -->
            <!-- -->
            <!-- Test Foces2 -->
            <!-- SerialNumber: 4c 05 5a 37 -->
            <!-- Expire: 2015.10.26 12:10:49 -->
            <!-- Subject: CN = TU GENEREL FOCES gyldig (funktionscertifikat) + SERIALNUMBER = CVR:30808460-FID:94731315, O = Danid A/S // CVR:30808460, C = DK -->
            <!--- serviceCertificate storeLocation="LocalMachine" storeName="My" x509FindType="FindBySerialNumber" findValue="4c 05 5a 37"/-->

            <serviceCertificate storeLocation="LocalMachine" storeName="My" x509FindType="FindBySerialNumber" findValue="45 c0 28 c0" />
            <!-- -->
            <!-- Live Foces1 -->
            <!-- SerialNumber: 45 c0 28 c0 -->
            <!-- Expire: 2013.12.16 15:53:29 -->
            <!-- Subject: CN = mySupply NemHandel Test (funktionscertifikat) + SERIALNUMBER = CVR:32433030-FID:1324040578104, O = mySupply NemHandel // CVR:32433030, C = DK -->
            <!-- serviceCertificate storeLocation="LocalMachine" storeName="My" x509FindType="FindBySerialNumber" findValue="45c028c0"/ -->
            <!-- -->
            <clientCertificate>
              <!-- Certificate validation is perform with a interceptor, to provide sender with better error information -->
              <!-- Custom certificate validation. The certificate the caller is using, might not have the same root certificate as the certificate used by this endpoint -->
              <authentication certificateValidationMode="None" revocationMode="NoCheck" />
              <!-- authentication customCertificateValidatorType="dk.gov.oiosi.security.validation.MultipleRootX509CertificateValidator, dk.gov.oiosi.library"
                              certificateValidationMode="Custom"
                              revocationMode="NoCheck" / -->
            </clientCertificate>
          </serviceCredentials>
          <serviceThrottling />
          <serviceAuthorization impersonateCallerForAllOperations="false" principalPermissionMode="None" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <!-- Here the custom RASP extensions of .Net3/WCF are referred to -->
    <extensions>
      <bindingElementExtensions>
        <!-- Signature validation proof generation -->
        <add name="serverSignatureValidationProofInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Security.ServerSignatureValidationProofBindingExtensionElement, dk.gov.oiosi.library" />
        <add name="clientSignatureValidationProofInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Security.ClientSignatureValidationProofBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Schema validation -->
        <add name="serverSchemaValidationInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Schema.ServerSchemaValidationBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Schematron validation -->
        <add name="serverSchematronValidationInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Schematron.ServerSchematronValidationBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Certificate validation -->
        <add name="serverCertificateValidationInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Certificate.ServerCertificateValidationBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Custom RASP headers-->
        <add name="clientPartyIdentifierHeader" type="dk.gov.oiosi.raspProfile.extension.wcf.Interceptor.CustomHeader.ClientPartyIdentifierHeaderBindingExtensionElement, dk.gov.oiosi.raspProfile" />
        <add name="serverPartyIdentifierHeader" type="dk.gov.oiosi.raspProfile.extension.wcf.Interceptor.CustomHeader.ServerPartyIdentifierHeaderBindingExtensionElement, dk.gov.oiosi.raspProfile" />
        <!-- Adds parameters to ALL messages, including RM messages -->
        <add name="ubiquitousProperties" type="dk.gov.oiosi.extension.wcf.Interceptor.UbiquitousProperties.UbiquitousPropertiesBindingExtensionElement, dk.gov.oiosi.library" />
      </bindingElementExtensions>
      <behaviorExtensions>
        <add name="signCustomHeaders" type="dk.gov.oiosi.extension.wcf.Behavior.SignCustomHeadersBehaviorExtensionElement, dk.gov.oiosi.library, Version=2.0.3.0, Culture=neutral, PublicKeyToken=null" />
      </behaviorExtensions>
    </extensions>
  </system.serviceModel>
  <!-- Large file start -->
  <!-- In case of IIS 5.1, 6.0: -->
  <system.web>
    <!-- By default maximum upload size is set to 4096(KB) (4 MB) -->
    <!-- http://www.webdavsystem.com/server/documentation/upload -->
    <authentication mode="Forms" />
    <authorization>
      <allow users="?" />
    </authorization>
    <httpRuntime maxRequestLength="1048576" executionTimeout="3600" />
    <!-- Large file end -->
    <compilation debug="true" />
  </system.web>
  <!-- In case of IIS 7.0, both integrated and classic mode -->
  <system.webServer>
    <directoryBrowse enabled="true" />
    <security>
      <requestFiltering>
        <requestLimits maxAllowedContentLength="2147483647" />
      </requestFiltering>
    </security>
  </system.webServer>
</configuration>