<?xml version="1.0" encoding="utf-8"?>
<!-- 
/* 
 * Copyright (c) 2007, Danish National IT and Telecom Agency All rights reserved. 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met: 
 * 
 *     * Redistributions of source code must retain the above copyright notice, 
 *       this list of conditions and the following disclaimer. 
 * 
 *     * Redistributions in binary form must reproduce the above copyright notice, 
 *       this list of conditions and the following disclaimer in the documentation 
 *       and/or other materials provided with the distribution. 
 * 
 *     * Neither the name of the Danish National IT and Telecom Agency nor the names 
 *       of its contributors may be used to endorse or promote products derived from 
 *       this software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */
-->
<configuration>
  <configSections>
    <section name="loggingConfiguration" type="Microsoft.Practices.Enterprisedk.gov.oiosi.library.Logging.Configuration.LoggingSettings, Microsoft.Practices.Enterprisedk.gov.oiosi.library.Logging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null" />
    <section name="dataConfiguration" type="Microsoft.Practices.Enterprisedk.gov.oiosi.library.Data.Configuration.DatabaseSettings, Microsoft.Practices.Enterprisedk.gov.oiosi.library.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null" />
    <section name="agreementHandlerConfiguration" type="dk.gov.oiosi.client.agreement.configuration.AgreementHandlerAppConfiguration, dk.gov.oiosi.client, Version=1.1.0.*, Culture=neutral, PublicKeyToken=null"/>
  </configSections>
    
  <agreementHandlerConfiguration wcfClientName="UserManagerEndpoint">
    <uddiLookupConfiguration endpointKey="5798009811578" endpointKeyType="ean" serviceContractTModelIdentifier="uddi:1870d550-bf7c-11dc-850a-eed6c461850a"/>
  </agreementHandlerConfiguration>

  <!--  Diagnostics.
  
        This section enables logging of SOAP messages and traces of the inner workings of WCF and the OIOSI library(for example exceptions thrown).
        To enable the logging, just remove the commentation "< ! - -" from the code below.
        
        SOAP messages end up in the file App_messages.svclog and exceptions in App_tracelog.svclog,
        both in the same folder as the program running
  -->

  <!-- 
  <system.diagnostics>
    <sources>
      <source name="System.ServiceModel" switchValue="Warning,ActivityTracing"
        propagateActivity="true">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="System.ServiceModel.MessageLogging" switchValue="Warning, ActivityTracing" logKnownPii="true">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelMessageLoggingListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="dk.gov.oiosi.library" switchValue="Warning, ActivityTracing">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="dk.gov.oiosi.LesnikowskiMailProvider" switchValue="Warning, ActivityTracing">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="dk.gov.oiosi.raspProfile" switchValue="Warning, ActivityTracing">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add initializeData="App_tracelog.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        name="ServiceModelTraceListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
      <add initializeData="App_messages.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        name="ServiceModelMessageLoggingListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
    </sharedListeners>
    <trace autoflush="true" />
  </system.diagnostics>
  -->

  <system.serviceModel>
    <!-- 
    <diagnostics>
      <messageLogging logEntireMessage="true" logMalformedMessages="true" logMessagesAtServiceLevel="false" logMessagesAtTransportLevel="true" />
    </diagnostics>
    -->
    <client>
      <!-- The HTTP endpoint-->
      <endpoint name="OiosiHttpEndpoint" address="http://oiositest.dk/TestEndpointInvoice/OiosiOmniEndpointA.svc" binding="customBinding" bindingConfiguration="OiosiHttpBindingClient" contract="dk.gov.oiosi.communication.client.IClientProxyContract" behaviorConfiguration="OiosiEndpointBehavior" />

      <!-- The mail endpoint -->
      <endpoint name="OiosiEmailEndpoint" address="mailto:server@oiositest.dk" binding="customBinding" bindingConfiguration="OiosiEmailBindingClient" contract="dk.gov.oiosi.communication.client.IClientProxyContract" behaviorConfiguration="OiosiEndpointBehavior" />

      <!-- UDDI endpoints -->
      <endpoint address="http://publish.uddi.ehandel.gov.dk/registry/uddi/inquiry" binding="basicHttpBinding" bindingConfiguration="basic" contract="UDDI_Inquiry_PortType" name="OiosiClientEndpointInquiry" />
      <endpoint address="http://publish.uddi.ehandel.gov.dk/registry/uddi/security" binding="basicHttpBinding" bindingConfiguration="basic" contract="UDDI_Security_PortType" name="OiosiClientEndpointSecurity" />
      <endpoint address="https://publish.uddi.ehandel.gov.dk/UddiProxyService/2008/05/09/UDDIProxy.svc" binding="wsHttpBinding" bindingConfiguration="WSHttpBinding" contract="UDDI_Publication_PortType" name="OiosiClientEndpointPublication" />

      <!-- User manager endpoint -->
      <endpoint name="UserManagerEndpoint" address="http://isb.oio.dk/oioservices/UserManagerService/UserManagerService.svc" binding="customBinding" bindingConfiguration="OiosiSecureBinding" contract="UserManagerServiceCaller.UserManagerService.IUserManagerService" />

      <!-- Update service endpoint -->
      <endpoint address="http://213.237.161.90/UpdateService/20090210/NemHandelUpdateService.svc" binding="basicHttpBinding" bindingConfiguration="basic" contract="INemHandelUpdateService" name="NemHandelUpdateService" />

    </client>

    <!-- The mail service (for receiving incoming messages)  behaviorConfiguration="OiosiServiceBehavior"-->
    <services>
      <service  name="dk.gov.oiosi.raspProfile.communication.service.RaspServiceImplementation"
                behaviorConfiguration="OiosiServiceBehavior">
        <endpoint contract="dk.gov.oiosi.communication.service.IServiceContract"
                  address="mailto:server@oiositest.dk"
                  binding="customBinding" bindingConfiguration="OiosiEmailBindingServer">
        </endpoint>
      </service>

      <service name="dk.gov.oiosi.test.integration.communication.LocalRaspRequestTest+ServiceStubImplementation" behaviorConfiguration="OiosiServiceBehavior">
        <endpoint contract="dk.gov.oiosi.communication.service.IServiceContract" address="http://localhost:8080/test_rasp_service" binding="customBinding" bindingConfiguration="OiosiHttpBindingService">
        </endpoint>
      </service>
    </services>


    <behaviors>
      <endpointBehaviors>
        <behavior name="OiosiEndpointBehavior">
          <signCustomHeaders>
            <headers>
              <add name="SenderPartyIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="SenderPartyIdentifierType" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="ReceiverPartyIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="ReceiverPartyIdentifierType" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="MessageIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/"/>
            </headers>
          </signCustomHeaders>
        </behavior>
      </endpointBehaviors>
      <!-- ... for receiving -->
      <serviceBehaviors>
        <behavior name="OiosiServiceBehavior">
          <signCustomHeaders>
            <headers>
              <add name="MessageIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/"/>
              <add name="SenderPartyIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="SenderPartyIdentifierType" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="ReceiverPartyIdentifier" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
              <add name="ReceiverPartyIdentifierType" namespace="http://rep.oio.dk/oiosi.ehandel.gov.dk/xml/schemas/2007/09/01/" />
            </headers>
          </signCustomHeaders>

          <serviceCredentials>
            <clientCertificate>
              <authentication customCertificateValidatorType="dk.gov.oiosi.security.validation.MultipleRootX509CertificateValidator, dk.gov.oiosi.library"
                              certificateValidationMode="Custom"
                              revocationMode="NoCheck" />
            </clientCertificate>
          </serviceCredentials>
          <serviceThrottling />
          <serviceAuthorization impersonateCallerForAllOperations="false" principalPermissionMode="None" />
        </behavior>
      </serviceBehaviors>
    </behaviors>

    <bindings>
      <!-- Basic http binding is used to perform UDDI calls -->
      <basicHttpBinding>
        <binding name="basic" textEncoding="utf-8" maxReceivedMessageSize="10000000"  />
      </basicHttpBinding>

      <wsHttpBinding>
        <binding name="WSHttpBinding" closeTimeout="00:10:00"
            openTimeout="00:10:00" receiveTimeout="00:10:00" sendTimeout="00:10:00"
            bypassProxyOnLocal="false" transactionFlow="false" hostNameComparisonMode="StrongWildcard"
            maxBufferPoolSize="524288" maxReceivedMessageSize="65536"
            messageEncoding="Text" textEncoding="utf-8" useDefaultWebProxy="true"
            allowCookies="false">
          <readerQuotas maxDepth="32" maxStringContentLength="8192" maxArrayLength="16384"
              maxBytesPerRead="4096" maxNameTableCharCount="16384" />
          <security mode="Transport">
            <transport clientCredentialType="Certificate" proxyCredentialType="None"
                realm="" />
            <message clientCredentialType="None" negotiateServiceCredential="true"
                algorithmSuite="Default" establishSecurityContext="true" />
          </security>
        </binding>
      </wsHttpBinding>

      <customBinding>

        <!-- The OIOSI RASP HTTP binding  - for sending-->
        <binding name="OiosiHttpBindingClient" closeTimeout="00:05:00" openTimeout="00:05:00" receiveTimeout="00:05:00" sendTimeout="00:05:00" >
          <clientSchemaValidationInterceptor ValidateRequest="false" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <clientSchematronValidationInterceptor ValidateRequest="false" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <reliableSession flowControlEnabled="false" ordered="true" maxTransferWindowSize="32" maxPendingChannels="32" />
          <ubiquitousProperties/>
          <clientSignatureValidationProofInterceptor />
          <security messageSecurityVersion="WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" defaultAlgorithmSuite="Default" authenticationMode="MutualCertificate" requireDerivedKeys="false" securityHeaderLayout="Strict" includeTimestamp="true" keyEntropyMode="CombinedEntropy" messageProtectionOrder="SignBeforeEncrypt" requireSignatureConfirmation="false">
            <localClientSettings maxClockSkew="00:10:00" />
            <localServiceSettings maxClockSkew="00:10:00" />
            <secureConversationBootstrap>
              <localClientSettings maxClockSkew="00:10:00" />
              <localServiceSettings maxClockSkew="00:10:00" />
            </secureConversationBootstrap>
          </security>
          <clientPartyIdentifierHeader/>
          <textMessageEncoding messageVersion="Default" writeEncoding="utf-8">
            <readerQuotas maxArrayLength="200000000" />
          </textMessageEncoding>
          <httpTransport manualAddressing="false" maxReceivedMessageSize="10485760" maxBufferSize="10485760" />
        </binding>

        <!-- The OIOSI RASP http binding - for receiving -->
        <!-- The standard OIOSI RASP HTTP binding-->
        <binding name="OiosiHttpBindingService" closeTimeout="00:05:00" openTimeout="00:05:00" receiveTimeout="00:05:00" sendTimeout="00:05:00">
          <!-- XML Schema and Schematron validation-->
          <serverSchematronValidationInterceptor ValidateRequest="true" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <serverSchemaValidationInterceptor ValidateRequest="true" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <!-- WS-ReliableMessaging -->
          <reliableSession inactivityTimeout="00:10:00" maxRetryCount="8" ordered="true"/>
          <!-- Generates a signature validation proof, added as a property on the reply message -->
          <serverSignatureValidationProofInterceptor/>
          <!-- WS-Security -->
          <security defaultAlgorithmSuite="Default" authenticationMode="MutualCertificate" requireDerivedKeys="false" securityHeaderLayout="Strict" includeTimestamp="true" messageProtectionOrder="SignBeforeEncrypt" messageSecurityVersion="WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" requireSignatureConfirmation="false">
            <localClientSettings maxClockSkew="00:10:00" />
            <localServiceSettings maxClockSkew="00:10:00" />
            <secureConversationBootstrap>
              <localClientSettings maxClockSkew="00:10:00" />
              <localServiceSettings maxClockSkew="00:10:00" />
            </secureConversationBootstrap>
          </security>
          <!-- Adds the custom SenderParty/ReceiverPartyIndetifier headers -->
          <serverPartyIdentifierHeader/>
          <!-- Encoding -->
          <textMessageEncoding messageVersion="Default" writeEncoding="utf-8"/>
          <!-- HTTP transport -->
          <httpTransport manualAddressing="false" maxReceivedMessageSize="10485760" maxBufferSize="10485760"/>
        </binding>
        

        <!-- The OIOSI RASP mail binding - for sending -->
        <binding name="OiosiEmailBindingClient" closeTimeout="00:05:00" openTimeout="00:05:00" receiveTimeout="00:05:00" sendTimeout="00:05:00">
          <clientSchemaValidationInterceptor ValidateRequest="false" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <clientSchematronValidationInterceptor ValidateRequest="false" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <reliableSession flowControlEnabled="false" ordered="true" maxTransferWindowSize="32" maxPendingChannels="32"/>
          <ubiquitousProperties/>
          <clientSignatureValidationProofInterceptor />
          <security messageSecurityVersion="WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" defaultAlgorithmSuite="Default" authenticationMode="MutualCertificate" requireDerivedKeys="false" securityHeaderLayout="Strict" includeTimestamp="true" keyEntropyMode="CombinedEntropy" messageProtectionOrder="SignBeforeEncrypt" requireSignatureConfirmation="false">
            <localClientSettings maxClockSkew="00:10:00" />
            <localServiceSettings maxClockSkew="00:10:00" />
            <secureConversationBootstrap>
              <localClientSettings maxClockSkew="00:10:00" />
              <localServiceSettings maxClockSkew="00:10:00" />
            </secureConversationBootstrap>
          </security>
          <clientPartyIdentifierHeader/>
          <textMessageEncoding messageVersion="Default" writeEncoding="utf-8">
            <readerQuotas maxArrayLength="200000000" />
          </textMessageEncoding>
          <emailTransport outboxImplementation="dk.gov.oiosi.lesnikowskiMailProvider.SmtpOutboxLesnikowski, dk.gov.oiosi.lesnikowskiMailProvider" inboxImplementation="dk.gov.oiosi.lesnikowskiMailProvider.Pop3InboxLesnikowski, dk.gov.oiosi.lesnikowskiMailProvider" sendingServerAddress="" receivingServerAddress="" receivingUserName="" receivingPassword="" replyAddress="mailto:" />
        </binding>


        <!-- The OIOSI RASP mail binding - for receiving -->
        <binding name="OiosiEmailBindingServer" closeTimeout="00:05:00" openTimeout="00:05:00" receiveTimeout="00:05:00" sendTimeout="00:05:00">
          <serverSchematronValidationInterceptor ValidateRequest="true" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <serverSchemaValidationInterceptor ValidateRequest="true" ValidateResponse="false" FaultOnRequestValidationException="true" />
          <reliableSession flowControlEnabled="false" ordered="true" maxTransferWindowSize="32" maxPendingChannels="32"/>
          <serverSignatureValidationProofInterceptor />
          <security messageSecurityVersion="WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" defaultAlgorithmSuite="Default" authenticationMode="MutualCertificate" requireDerivedKeys="false" securityHeaderLayout="Strict" includeTimestamp="true" keyEntropyMode="CombinedEntropy" messageProtectionOrder="SignBeforeEncrypt" requireSignatureConfirmation="false">
            <localClientSettings maxClockSkew="00:10:00" />
            <localServiceSettings maxClockSkew="00:10:00" />
            <secureConversationBootstrap>
              <localClientSettings maxClockSkew="00:10:00" />
              <localServiceSettings maxClockSkew="00:10:00" />
            </secureConversationBootstrap>
          </security>
          <serverPartyIdentifierHeader/>
          <textMessageEncoding messageVersion="Default" writeEncoding="utf-8">
            <readerQuotas maxArrayLength="200000000" />
          </textMessageEncoding>
          <emailTransport outboxImplementation="dk.gov.oiosi.lesnikowskiMailProvider.SmtpOutboxLesnikowski, dk.gov.oiosi.lesnikowskiMailProvider" inboxImplementation="dk.gov.oiosi.lesnikowskiMailProvider.Pop3InboxLesnikowski, dk.gov.oiosi.lesnikowskiMailProvider" sendingServerAddress="" receivingServerAddress="" receivingUserName="" receivingPassword="" replyAddress="mailto:"  maxReceivedMessageSize="2147000000"/>
        </binding>

        <binding name="OiosiSecureBinding" closeTimeout="00:00:30" openTimeout="00:00:30" receiveTimeout="00:01:00" sendTimeout="00:01:00">
          <security messageSecurityVersion="WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10" defaultAlgorithmSuite="Default" authenticationMode="MutualCertificate" requireDerivedKeys="false" securityHeaderLayout="Strict" includeTimestamp="true" keyEntropyMode="CombinedEntropy" messageProtectionOrder="SignBeforeEncrypt" requireSignatureConfirmation="false"/>
          <textMessageEncoding messageVersion="Default" writeEncoding="utf-8">
            <readerQuotas maxArrayLength="200000000" />
          </textMessageEncoding>
          <httpTransport manualAddressing="false" maxReceivedMessageSize="10485760" maxBufferSize="10485760"/>
        </binding>
      </customBinding>
    </bindings>


    <!-- Our binding extension, letting WCF know where our custom WCF components are implemented -->
    <extensions>
      <bindingElementExtensions>
        <add name="emailTransport" type="dk.gov.oiosi.extension.wcf.EmailTransport.EmailBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Signature validation proof generation -->
        <add name="serverSignatureValidationProofInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Security.ServerSignatureValidationProofBindingExtensionElement, dk.gov.oiosi.library" />
        <add name="clientSignatureValidationProofInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Security.ClientSignatureValidationProofBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Schema validation -->
        <add name="serverSchemaValidationInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Schema.ServerSchemaValidationBindingExtensionElement, dk.gov.oiosi.library" />
        <add name="clientSchemaValidationInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Schema.ClientSchemaValidationBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Schema validation -->
        <add name="serverSchematronValidationInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Schematron.ServerSchematronValidationBindingExtensionElement, dk.gov.oiosi.library" />
        <add name="clientSchematronValidationInterceptor" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Schematron.ClientSchematronValidationBindingExtensionElement, dk.gov.oiosi.library" />
        <!-- Custom RASP headers-->
        <add name="clientPartyIdentifierHeader" type="dk.gov.oiosi.raspProfile.extension.wcf.Interceptor.CustomHeader.ClientPartyIdentifierHeaderBindingExtensionElement, dk.gov.oiosi.raspProfile" />
        <add name="serverPartyIdentifierHeader" type="dk.gov.oiosi.raspProfile.extension.wcf.Interceptor.CustomHeader.ServerPartyIdentifierHeaderBindingExtensionElement, dk.gov.oiosi.raspProfile" />
        <!-- Adds parameters to ALL messages, including RM messages -->
        <add name="ubiquitousProperties" type="dk.gov.oiosi.extension.wcf.Interceptor.UbiquitousProperties.UbiquitousPropertiesBindingExtensionElement, dk.gov.oiosi.library" />
      </bindingElementExtensions>

      <behaviorExtensions>
        <!-- Behavior that selects headers to be added for signing -->
        <add name="signCustomHeaders" type="dk.gov.oiosi.extension.wcf.Behavior.SignCustomHeadersBehaviorExtensionElement, dk.gov.oiosi.library, Version=1.2.4.0, Culture=neutral, PublicKeyToken=null" />
      </behaviorExtensions>

    </extensions>
  </system.serviceModel>
</configuration>