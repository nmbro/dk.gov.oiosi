<?xml version="1.0" encoding="utf-8" ?>

<!-- 
/* 
 * Copyright (c) 2007, Danish National IT and Telecom Agency All rights reserved. 
 * Redistribution and use in source and binary forms, with or without modification, 
 * are permitted provided that the following conditions are met: 
 * 
 *     * Redistributions of source code must retain the above copyright notice, 
 *       this list of conditions and the following disclaimer. 
 * 
 *     * Redistributions in binary form must reproduce the above copyright notice, 
 *       this list of conditions and the following disclaimer in the documentation 
 *       and/or other materials provided with the distribution. 
 * 
 *     * Neither the name of the Danish National IT and Telecom Agency nor the names 
 *       of its contributors may be used to endorse or promote products derived from 
 *       this software without specific prior written permission. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
 * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
 * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */
-->

<configuration>

  <!--  Diagnostics.
  
        This section enables logging of SOAP messages and traces of the inner workings of WCF (for example exceptions thrown).
        To enable the logging, just remove the commentation "< ! - -" from the code below.
        
        SOAP messages end up in the file App_messages.svclog and exceptions in App_tracelog.svclog,
        both in the same folder as the program running
  -->

  <system.diagnostics>
    <sources>
      <source name="System.ServiceModel.MessageLogging" switchValue="Warning, ActivityTracing">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelMessageLoggingListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
      <source name="System.ServiceModel" switchValue="Warning"
        propagateActivity="true">
        <listeners>
          <add type="System.Diagnostics.DefaultTraceListener" name="Default">
            <filter type="" />
          </add>
          <add name="ServiceModelTraceListener">
            <filter type="" />
          </add>
        </listeners>
      </source>
    </sources>
    <sharedListeners>
      <add initializeData="App_messages.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        name="ServiceModelMessageLoggingListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
      <add initializeData="App_tracelog.svclog" type="System.Diagnostics.XmlWriterTraceListener, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
        name="ServiceModelTraceListener" traceOutputOptions="Timestamp">
        <filter type="" />
      </add>
    </sharedListeners>
    <trace autoflush="true" />
  </system.diagnostics>


  <system.serviceModel>

    <diagnostics>
      <messageLogging logEntireMessage="true" logMalformedMessages="true"
        logMessagesAtServiceLevel="false" logMessagesAtTransportLevel="true" />
    </diagnostics>

    <!-- Defines our service -->
    <services>
      <service name="dk.gov.oiosi.communication.service.ServiceImplementation"
               behaviorConfiguration="OiosiServiceCertificateBehavior">

        <endpoint contract="dk.gov.oiosi.communication.service.IServiceContract"
                  address="mailto:server@oiositest.dk"
                  binding="customBinding"
                  bindingConfiguration="OiosiEmailBinding"
                  >
          <identity>
            <dns value="IT- og Telestyrelsen - OIOSI test virksomhedssignatur" />
          </identity>

        </endpoint>
      </service>
    </services>

    <!-- The behavior that links a certificate to our service -->
    <behaviors>
      <serviceBehaviors>
        <behavior name="OiosiServiceCertificateBehavior">

          <!--
          Note that the test applications use test certificates, to run with your 
          own, live, certificates please change this section to refer to them instead. 
          For a hint on how to find the serial number and store location/name of your 
          certificate check the section named “Importing certificates”  in the document 
          “Rasp Library for .Net Installation”.
          -->
          <serviceCredentials>
            <serviceCertificate    storeLocation="CurrentUser"
                                   storeName="My"
                                   x509FindType="FindBySerialNumber"
                                   findValue="40 36 b3 79"  />
            <clientCertificate>
              <authentication certificateValidationMode="ChainTrust" revocationMode="NoCheck"/>
            </clientCertificate>
          </serviceCredentials>
          <serviceThrottling/>
          <serviceAuthorization impersonateCallerForAllOperations="false" principalPermissionMode="None" />
        </behavior>
      </serviceBehaviors>
    </behaviors>


    <bindings>
      <customBinding>

        <!-- The OIOSI RASP mail binding -->
        <binding  name="OiosiEmailBinding"

                  closeTimeout="00:02:00"
                  openTimeout="00:02:00"
                  receiveTimeout="00:02:00"
                  sendTimeout="00:02:00">
          <schematronValidation/>
          <schemaValidation/>
          <reliableSession flowControlEnabled="false" ordered="true"/>
          <signatureValidationProof/>
          <security messageSecurityVersion="WSSecurity10WSTrustFebruary2005WSSecureConversationFebruary2005WSSecurityPolicy11BasicSecurityProfile10"
                    defaultAlgorithmSuite="Default"
                    authenticationMode="MutualCertificate"
                    requireDerivedKeys="false"        
                    securityHeaderLayout="Strict"        
                    includeTimestamp="true"
                    keyEntropyMode="CombinedEntropy"            
                    messageProtectionOrder="SignBeforeEncrypt"
                    requireSignatureConfirmation="false"
           />
          <textMessageEncoding messageVersion="Default" writeEncoding="utf-8" />
          <oiosiEmailTransport outboxImplementation="dk.gov.oiosi.lesnikowskiMailProvider.SmtpOutboxLesnikowski, dk.gov.oiosi.lesnikowskiMailProvider"
                               inboxImplementation="dk.gov.oiosi.lesnikowskiMailProvider.Pop3InboxLesnikowski, dk.gov.oiosi.lesnikowskiMailProvider"
                               sendingServerAddress="oiositest.dk"
                               receivingServerAddress="oiositest.dk"
                               receivingUserName="server"
                               receivingPassword="password"
                               replyAddress="mailto:server@oiositest.dk"/>

        </binding>
      </customBinding>
    </bindings>

    <extensions>
      <bindingElementExtensions>
        <add name="oiosiEmailTransport" type="dk.gov.oiosi.extension.wcf.EmailTransport.EmailBindingExtensionElement, dk.gov.oiosi.library"/>

        <!-- Signature validation proof generation -->
        <add name="signatureValidationProof" type="dk.gov.oiosi.extension.wcf.Interceptor.Security.ServerSignatureValidationProofBindingExtensionElement, dk.gov.oiosi.library"/>

        <!-- Schema validation -->
        <add name="schemaValidation" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Schema.ServerSchemaValidationBindingExtensionElement, dk.gov.oiosi.library"/>

        <!-- Schema validation -->
        <add name="schematronValidation" type="dk.gov.oiosi.extension.wcf.Interceptor.Validation.Schematron.ServerSchematronValidationBindingExtensionElement, dk.gov.oiosi.library"/>

        <!-- Diagnostics interceptors-->
      </bindingElementExtensions>
    </extensions>

  </system.serviceModel>

</configuration>